{"version":3,"sources":["Contract/BiFrost.js","Burn.js","Mint.js","getWeb3.js","txzWallet.js","Accounts.js","App.js","serviceWorker.js","index.js"],"names":["ABI","Burn","ethWallet","txzWallet","useState","step","setStep","setWhiteListedEthAddress","depositAmount","setDepositAmount","tezosAddress","setTezosAdress","ethereumAddress","setEthereumAddress","accounts","setAccounts","tezosContract","setTezosContract","ethereumContract","setEthereumContract","loader","setLoader","useEffect","setupAccounts","a","web3","eth","getAccounts","console","log","instance","Contract","from","wallet","pkh","accountPkh","at","bifrost","burn","methods","requestBurnToken","send","operation","error","approve","request_fortune","confirmation","withdraw","style","width","height","backgroundColor","borderRadius","padding","Form","Group","controlId","Label","Control","placeholder","readOnly","onChange","e","target","value","Text","className","marginTop","CircularProgress","Button","onClick","variant","size","disabled","Mint","whitelistedEthAddress","callDepositEntryPoint","deposit","toLowerCase","amount","callMintTokens","requestIfAddressWhitelisted","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","infuraProvider","providers","HttpProvider","React","Component","ThanosWallet","isAvailable","Error","connect","App","setEthWallet","tezosWallet","setTxzWallet","loadWallets","alert","tezos","toTezos","tz","getBalance","accountBalance","info","subTitle2","fontSize","color","fontWeight","Container","border","Row","Col","sm","md","lg","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.44d61381.chunk.js","sourcesContent":["const ABI = [\n    {\n    \"inputs\": [\n    {\n    \"internalType\": \"address\",\n    \"name\": \"tokenAddress\",\n    \"type\": \"address\"\n    }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n    },\n    {\n    \"anonymous\": false,\n    \"inputs\": [\n    {\n    \"indexed\": true,\n    \"internalType\": \"bytes32\",\n    \"name\": \"id\",\n    \"type\": \"bytes32\"\n    }\n    ],\n    \"name\": \"ChainlinkCancelled\",\n    \"type\": \"event\"\n    },\n    {\n    \"anonymous\": false,\n    \"inputs\": [\n    {\n    \"indexed\": true,\n    \"internalType\": \"bytes32\",\n    \"name\": \"id\",\n    \"type\": \"bytes32\"\n    }\n    ],\n    \"name\": \"ChainlinkFulfilled\",\n    \"type\": \"event\"\n    },\n    {\n    \"anonymous\": false,\n    \"inputs\": [\n    {\n    \"indexed\": true,\n    \"internalType\": \"bytes32\",\n    \"name\": \"id\",\n    \"type\": \"bytes32\"\n    }\n    ],\n    \"name\": \"ChainlinkRequested\",\n    \"type\": \"event\"\n    },\n    {\n    \"anonymous\": false,\n    \"inputs\": [\n    {\n    \"indexed\": true,\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n    },\n    {\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"\",\n    \"type\": \"address\"\n    },\n    {\n    \"indexed\": false,\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n    }\n    ],\n    \"name\": \"TokenBurned\",\n    \"type\": \"event\"\n    },\n    {\n    \"inputs\": [\n    {\n    \"internalType\": \"bytes32\",\n    \"name\": \"_requestId\",\n    \"type\": \"bytes32\"\n    },\n    {\n    \"internalType\": \"uint256\",\n    \"name\": \"_value\",\n    \"type\": \"uint256\"\n    }\n    ],\n    \"name\": \"fulfill\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n    },\n    {\n    \"inputs\": [\n    {\n    \"internalType\": \"string\",\n    \"name\": \"tezosAddress\",\n    \"type\": \"string\"\n    },\n    {\n    \"internalType\": \"uint256\",\n    \"name\": \"amount\",\n    \"type\": \"uint256\"\n    }\n    ],\n    \"name\": \"requestBurnToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n    },\n    {\n    \"inputs\": [],\n    \"name\": \"requestIfAddressWhitelisted\",\n    \"outputs\": [\n    {\n    \"internalType\": \"bytes32\",\n    \"name\": \"\",\n    \"type\": \"bytes32\"\n    }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n    },\n    {\n    \"inputs\": [],\n    \"name\": \"value\",\n    \"outputs\": [\n    {\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n    }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n    }\n    ]\n\n    export default ABI;\n    ","import React, { useState,useEffect } from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport ABI from './Contract/BiFrost';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Burn = ({ethWallet, txzWallet}) => {\n\n    const [step, setStep] = useState(1);\n    const [whitelistedEthAddress, setWhiteListedEthAddress] = useState('');\n    const [depositAmount, setDepositAmount] = useState(0);\n    const [tezosAddress, setTezosAdress] = useState('Unlock Wallet');\n    const [ethereumAddress, setEthereumAddress] = useState('Unlock Wallet');\n    const [accounts, setAccounts] = useState([]);\n    const [web3, setWeb3] = useState();\n    const [tezosContract, setTezosContract] = useState();\n    const [ethereumContract, setEthereumContract] = useState()\n\tconst [loader, setLoader] = useState(false);\n\n    useEffect(() => {\n        setupAccounts();\n    },[ethWallet,txzWallet])\n\n    const setupAccounts = async() => {\n        // ethereum address\n        if(ethWallet) {\n            const accounts = await ethWallet.web3.eth.getAccounts();\n            setAccounts(accounts);\n            setEthereumAddress(accounts[0]);\n            setWhiteListedEthAddress(accounts[0]);\n\n            // let provider = await ethWallet.infuraProvider();\n            // console.log(provider);\n            // setWeb3(provider);\n\n            console.log(ABI);\n            const instance = new ethWallet.web3.eth.Contract(\n\t\t\t\tABI,\n                \"0x3A03B4EddF521a0Cb2bC761DD06A04F322eEe5F8\",\n                {\n                    from:accounts[0]\n                }\n            );\n\n            console.log(instance, \"instance\");\n            setEthereumContract(instance);\n        }\n       \n        if(txzWallet) {\n            // tezos address\n            const accountPkh = await txzWallet.wallet.pkh();\n            setTezosAdress(accountPkh);\n\n            console.log(accountPkh,\"accountPkh\");\n            const bifrost = await txzWallet.wallet.at(\n                \"KT192uQ2Cjhr3Hgnf8438p3DxwhpdFrMTGyJ\"\n                ); \n            setTezosContract(bifrost);\n        }\n    }\n\n    const burn = async() => {\n\t\tsetLoader(true);\n        try {\n            const operation = await ethereumContract.methods.requestBurnToken(tezosAddress, depositAmount).send({from:accounts[0]});\n            console.log(operation);\n        } catch(err) {\n            console.error(err);\n        }\n\t\tsetStep(2);\n\t\tsetLoader(false);\n    }\n\n    const approve = async() => {\n\t\tsetLoader(true);\n        try {  \n            const operation = await tezosContract.methods.request_fortune(1,10).send();\n            await operation.confirmation();\n\n        } catch (err) {\n            console.error(err);\n        }\n\t\tsetStep(3);\n\t\tsetLoader(false);\n    }\n\n    const withdraw = async() => {\n\t\tsetLoader(true);\n        try {  \n            const operation = await tezosContract.methods.withdraw(depositAmount/1.5).send();\n            await operation.confirmation();\n        } catch (err) {\n            console.error(err);\n        }\n\t\tsetStep(1);\n\t\tsetLoader(false);\n    }\n\n    const box1 = {\n        width:'100%',\n        height:500,\n        backgroundColor:'#FF6961',\n        borderRadius:50,\n        padding:30\n    }\n\n    return(\n        <div style={box1}> \n            <Form>\n                <Form.Group controlId=\"formTezosAddress\">\n                    <Form.Label>Ethereum Burn Address</Form.Label>\n                    <Form.Control  placeholder={ethereumAddress} readOnly/>\n                </Form.Group>\n\n                <Form.Group controlId=\"formXTZAmount\">\n                    <Form.Label>Amount of bXTZ</Form.Label>\n                    <Form.Control  placeholder=\"0\" onChange={(e)=> {setDepositAmount(e.target.value)}}/>\n                    <Form.Text className=\"text-muted\">\n                        Returns {depositAmount/1.5} XTZ on Tezos\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group controlId=\"formEthAddress\">\n                    <Form.Label>Tezos Address Receiving XTZ</Form.Label>\n                    <Form.Control  placeholder={tezosAddress} readOnly/>\n                </Form.Group>\n            </Form>\n            <div style={{width:'100%', marginTop:30}}>\n            \n                <div>\n                    {(step ===1) ? loader ? <CircularProgress/> :\n                        <Button onClick={() => burn()} variant=\"info\"  size=\"lg\" style={{width:'50%'}}>\n                            Burn bXTZ\n                        </Button>\n                        :\n                        <Button variant=\"outline-light\"  size=\"lg\" style={{width:'50%'}} disabled>\n                            Burn bXTZ\n                        </Button>\n                    }\n                </div>\n                <div style={{marginTop: 20}}>\n                    {(step ===2) ? loader ? <CircularProgress/> :\n                        <Button onClick={() => approve()} variant=\"info\"  size=\"lg\" style={{width:'50%'}}>\n                            Approve\n                        </Button>\n                        :\n                        <Button variant=\"outline-light\"  size=\"lg\" style={{width:'50%'}} disabled>\n                            Approve\n                        </Button>\n                    }\n                </div>\n                <div style={{marginTop: 20}}>\n                    {(step ===3) ? loader ? <CircularProgress/> :\n                        <Button onClick={() => withdraw()}  variant=\"info\"  size=\"lg\" style={{width:'50%'}}>\n                            Withdraw XTZ\n                        </Button>\n                        :\n                        <Button variant=\"outline-light\"  size=\"lg\" style={{width:'50%'}} disabled>\n                            Withdraw XTZ\n                        </Button>\n                    }\n                </div>\n            \n            </div>\n        </div>\n    )\n}\n\nexport default Burn;","import React, { useState, useEffect } from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport ABI from './Contract/BiFrost';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Mint = ({ethWallet, txzWallet}) => {\n\n    const [step, setStep] = useState(1);\n    const [whitelistedEthAddress, setWhiteListedEthAddress] = useState('');\n    const [depositAmount, setDepositAmount] = useState(0);\n    const [tezosAddress, setTezosAdress] = useState('Unlock Wallet');\n    const [ethereumAddress, setEthereumAddress] = useState('Unlock Wallet');\n    const [accounts, setAccounts] = useState([]);\n    const [web3, setWeb3] = useState();\n    const [tezosContract, setTezosContract] = useState();\n    const [ethereumContract, setEthereumContract] = useState()\n\tconst [loader, setLoader] = useState(false);\n\n    useEffect(() => {\n        setupAccounts();\n    },[ethWallet,txzWallet])\n\n    const setupAccounts = async() => {\n        // ethereum address\n        if(ethWallet) {\n            const accounts = await ethWallet.web3.eth.getAccounts();\n            setAccounts(accounts);\n            setEthereumAddress(accounts[0]);\n            setWhiteListedEthAddress(accounts[0]);\n\n            // let provider = await ethWallet.infuraProvider();\n            // console.log(provider);\n            // setWeb3(provider);\n\n            console.log(ABI);\n            const instance = new ethWallet.web3.eth.Contract(\n\t\t\t\tABI,\n                \"0x3A03B4EddF521a0Cb2bC761DD06A04F322eEe5F8\",\n                {\n                    from:accounts[0]\n                }\n            );\n\n            console.log(instance, \"instance\");\n            setEthereumContract(instance);\n        }\n       \n        if(txzWallet) {\n            // tezos address\n            const accountPkh = await txzWallet.wallet.pkh();\n            setTezosAdress(accountPkh);\n\n            console.log(accountPkh,\"accountPkh\");\n            const bifrost = await txzWallet.wallet.at(\n                \"KT192uQ2Cjhr3Hgnf8438p3DxwhpdFrMTGyJ\"\n                ); \n            setTezosContract(bifrost);\n        }\n    }\n\n    const callDepositEntryPoint = async() => {\n\t\tsetLoader(true);\n        try {  \n            const operation = await tezosContract.methods.deposit(whitelistedEthAddress.toLowerCase()).send({ amount: depositAmount });\n            await operation.confirmation();\n        } catch (err) {\n            console.error(err);\n\t\t}\n\t\tsetLoader(false);\n        setStep(2);\n    }\n\n    const callMintTokens = async() => {\n\t\tsetLoader(true);\n        try {\n            const operation = await ethereumContract.methods.requestIfAddressWhitelisted().send({from:accounts[0]});\n            console.log(operation);\n        } catch(err) {\n            console.error(err);\n\t\t}\n        setLoader(false);\n        setStep(1);\n    }\n\n    const box1 = {\n        width:'100%',\n        height:500,\n        backgroundColor:'#FF6961',\n        borderRadius:50,\n        padding:30\n    }\n\n    return (\n        <div style={box1}> \n        <Form>\n            <Form.Group controlId=\"formTezosAddress\">\n                <Form.Label>Tezos Deposit Address</Form.Label>\n                <Form.Control  placeholder={tezosAddress} readOnly/>\n            </Form.Group>\n\n            <Form.Group controlId=\"formXTZAmount\">\n                <Form.Label>Amount of XTZ</Form.Label>\n                <Form.Control  placeholder=\"0\" onChange={(e)=> {setDepositAmount(e.target.value)}}/>\n                <Form.Text className=\"text-muted\">\n                    Creates {depositAmount/1.5} bXTZ on Ethereum\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formEthAddress\">\n                <Form.Label>Ethereum Address Receiving bXTZ</Form.Label>\n                <Form.Control  placeholder={ethereumAddress} readOnly/>\n            </Form.Group>\n        </Form>\n        {(step ===1) ? loader ? <CircularProgress/> :\n            <div style={{width:'100%', marginTop:30}}>\n                <div>\n                    <Button onClick={() => callDepositEntryPoint()} variant=\"info\"  size=\"lg\" style={{width:'50%'}}>\n                        Deposit XTZ\n                    </Button>\n                </div>\n                <div style={{marginTop: 20}}>\n                    <Button  variant=\"outline-light\" size=\"lg\" style={{width:'50%'}} disabled>\n                        Mint bXTZ\n                    </Button>\n                </div>\n\n            </div>\n            : loader ? <CircularProgress/> :\n            <div style={{width:'100%', marginTop:30}}>\n                <div>\n                    <Button variant=\"outline-light\" size=\"lg\" style={{width:'50%'}} disabled>\n                        Deposit XTZ\n                    </Button>\n                </div>\n                <div style={{marginTop: 20}}>\n                    <Button onClick={() => callMintTokens()} variant=\"info\" size=\"lg\" style={{width:'50%'}} >\n                        Mint bXTZ\n                    </Button>\n                </div>\n\n            </div>\n        }\n    </div>\n    );\n}\n\nexport default Mint;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n\n      let web3, infuraProvider;\n\n      if (window.ethereum) {\n        web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n        } catch (error) {\n          reject(error);\n        }\n      }\n\n      infuraProvider = new Web3(\n\t\t\t\tnew Web3.providers.HttpProvider(\n\t\t\t\t\t\"https://kovan.infura.io/v3/50c1b6482c9f47b08dcab7b1500f5e24\"\n\t\t\t\t)\n\t\t\t);\n\t\t\tresolve({web3,infuraProvider});\n\n  });\n});\n\nexport default getWeb3;\n","import { ThanosWallet } from \"@thanos-wallet/dapp\";\n\nconst txzWallet = async() => {\n    try {\n      const available = await ThanosWallet.isAvailable();\n      if (!available) {\n      throw new Error(\"Thanos Wallet not installed\");\n      }\n      const wallet = new ThanosWallet(\"Bifrost Baker\");\n      await wallet.connect(\"carthagenet\");\n      return wallet;\n    } catch (err) {\n        console.error(err);\n    }\n  }\n\nexport default txzWallet;\n","import React from 'react';\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { ThanosWallet } from \"@thanos-wallet/dapp\";\nimport getWeb3 from \"./getWeb3\";\n\n    \n\n\nclass Accounts extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            step: 1,\n            whitelistedEthAddress: '',\n            depositAmount: 0,\n            tezosAddress:'Unlock Wallet',\n            ethereumAddress:'Unlock Wallet',\n            web3: null, \n            accounts: null,\n    \n        }\n        \n    }\n\n \n    async unlockTezosWallet(){\n        try {\n            const available = await ThanosWallet.isAvailable();\n            if (!available) {\n            throw new Error(\"Thanos Wallet not installed\");\n            }\n    \n            const wallet = new ThanosWallet(\"Bifrost Baker\");\n            await wallet.connect(\"carthagenet\");\n            const tezos = wallet.toTezos();\n    \n            const accountPkh = await tezos.wallet.pkh();\n            const accountBalance = await tezos.tz.getBalance(accountPkh);\n\n            this.setState({tezosAddress: accountPkh})\n    \n            console.info(`address: ${accountPkh}, balance: ${accountBalance}`);\n    \n            \n    \n        } catch (err) {\n            console.error(err);\n        }\n    }\n    async unlockEthWallet(){\n\n\n\n        console.log('yoyoy');\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n            const accounts = await web3.eth.getAccounts();\n            console.log(accounts[0])\n            this.setState({ web3: web3, accounts: accounts, ethereumAddress: accounts[0] });\n          \n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n              `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n          }\n\n    }\n    render(){\n        return (\n            <div>\n                <Row>\n                    <Col sm={4} md={9} lg={10}></Col>\n                    <Col>\n                        <Row>\n                            <Button onClick={() => this.unlockTezosWallet()} variant=\"info\" style={{width:150}}>Tezos Login</Button>\n                        </Row>\n                        <Row style={{marginTop:10}}>\n                            <Button onClick={() => this.unlockEthWallet()}variant=\"info\" style={{width:150}}>Ethereum Login</Button>\n                        </Row>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    \n}\n\nexport default Accounts;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Burn from './Burn';\nimport Mint from './Mint';\nimport Accounts from \"./Accounts\";\nimport getWeb3 from \"./getWeb3\";\nimport txzWallet from \"./txzWallet\";\n\n\nconst App = () => {\n\n  const [ethWallet, setEthWallet] = useState();\n  const [tezosWallet, setTxzWallet] = useState();\n  \n  useEffect(() => {\n    loadWallets();\n  });\n\n  const loadWallets = async() => {\n\n    try {\n      // console.log(\"api key\" + process.env.REACT_APP_API_KEY);\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n  \n      // Use web3 to get the user's accounts.\n      const accounts = await web3.web3.eth.getAccounts();\n      // const raghuAccounts = process.env.REACT_APP_ACCOUNT;\n      \n      console.log(accounts, \"accounts\");\n      setEthWallet(web3);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      // console.error(error);\n    }\n\n    try {\n      const wallet = await txzWallet()\n      const tezos = wallet.toTezos();\n      const accountPkh = await tezos.wallet.pkh();\n      const accountBalance = await tezos.tz.getBalance(accountPkh);\n      console.info(`address: ${accountPkh}, balance: ${accountBalance}`);\n      setTxzWallet(tezos);\n    } catch (err) {\n       // Catch any errors for any of the above operations.\n       alert(\"Thanos Wallet not installed\");\n      // console.error(error);\n    }\n\n  }\n\n  const labels = {\n    marginTop:50,\n    fontSize: 20,\n    color: '#FF6961',\n    fontWeight: 900\n  }\n  \n  const topTitle = {\n    marginTop:50,\n    fontSize: 70,\n    color: '#FF6961',\n    fontWeight: 900\n  }\n  \n  const subTitle = {\n    marginTop:20,\n    fontSize: 22,\n    color: '#16a2b9',\n    fontWeight: 900\n  }\n  const subTitle2 = {\n    marginTop:20,\n    fontSize: 20,\n    color: '#16a2b9',\n    fontWeight: 900\n  }\n\n  \n  return (\n    <div className=\"App\" style={{backgroundColor:'#fff1c1'}}>\n        <div style={{height:20, backgroundColor:'#fe5f55'}}>\n        </div>\n         <Container style={{marginTop: 20}}>    \n            <p style={topTitle} >Bifrost Baking Token</p>\n            <p style={subTitle} >Cross-Chain Wrapped Tokens Between Tezos and Ethereum </p>\n            <div style={{marginTop:80}}>\n              <p style={subTitle2} >The value of bXTZ grows via Tezos staking rewards!</p>\n              <p style={subTitle2} >Current Ratio    1 bXTZ = 1.5 XTZ</p>\n              <p style={subTitle2} >bTXZ token address: <span style={{border:'2px dashed #fe5f55', padding:'5px'}}>0x31678F57E2F9A416dED24a5684f5eFcce3c69997</span></p>\n            </div>\n                    <Row style={{marginTop: 40}}>\n                        <Col sm={1} md={2} lg={3}></Col>\n                        <Col>\n                            <p>Mint bXTZ Tokens</p>\n                            <Mint ethWallet={ethWallet} txzWallet={tezosWallet}/>\n                            <p style={{marginTop:100}}>Burn bXTZ Tokens</p>\n                            <Burn ethWallet={ethWallet} txzWallet={tezosWallet} />\n                        </Col>\n                        <Col sm={1} md={2} lg={3}></Col>\n                    </Row>\n          </Container>\n    </div>\n\n  );\n}\n\n\nconst labels = {\n  marginTop:50,\n  fontSize: 20,\n  color: '#FF6961',\n  fontWeight: 900\n}\n\nconst topTitle = {\n  marginTop:50,\n  fontSize: 70,\n  color: '#FF6961',\n  fontWeight: 900\n}\n\nconst subTitle = {\n  marginTop:20,\n  fontSize: 22,\n  color: '#16a2b9',\n  fontWeight: 900\n}\nconst subTitle2 = {\n  marginTop:20,\n  fontSize: 20,\n  color: '#16a2b9',\n  fontWeight: 900\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}